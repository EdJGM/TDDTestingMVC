// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollTesting.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CRUDSTestClienteFeature : object, Xunit.IClassFixture<CRUDSTestClienteFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CRUDSTestCliente", "  Como administrador del sistema\r\n  Quiero gestionar la información de clientes\r\n" +
                "  Para mantener actualizada la base de datos de clientes", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CRUDSTestCliente.feature"
#line hidden
        
        public CRUDSTestClienteFeature(CRUDSTestClienteFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Insertar cliente con datos válidos")]
        [Xunit.TraitAttribute("FeatureTitle", "CRUDSTestCliente")]
        [Xunit.TraitAttribute("Description", "Insertar cliente con datos válidos")]
        [Xunit.TraitAttribute("Category", "Cliente")]
        [Xunit.TraitAttribute("Category", "InsertarCliente")]
        [Xunit.TraitAttribute("Category", "DatosValidos")]
        public async System.Threading.Tasks.Task InsertarClienteConDatosValidos()
        {
            string[] tagsOfScenario = new string[] {
                    "Cliente",
                    "InsertarCliente",
                    "DatosValidos"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Insertar cliente con datos válidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
 await testRunner.GivenAsync("el usuario navega a la página de crear cliente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table1.AddRow(new string[] {
                            "1727857870",
                            "Nelson",
                            "Agustin",
                            "01/01/1990",
                            "juan@mail.com",
                            "0987654321",
                            "Quito",
                            "Activo"});
#line 11
 await testRunner.WhenAsync("completa el formulario con datos válidos", ((string)(null)), table1, "When ");
#line hidden
#line 14
 await testRunner.AndAsync("hace clic en el botón crear valido \"Crear Cliente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.ThenAsync("debe redirigirse a la página de listado de clientes", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table2.AddRow(new string[] {
                            "1727857870",
                            "Nelson",
                            "Agustin",
                            "01/01/1990",
                            "juan@mail.com",
                            "0987654321",
                            "Quito",
                            "Activo"});
#line 16
 await testRunner.AndAsync("el cliente debe aparecer en la lista", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Insertar cliente con correo inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "CRUDSTestCliente")]
        [Xunit.TraitAttribute("Description", "Insertar cliente con correo inválido")]
        [Xunit.TraitAttribute("Category", "Cliente")]
        [Xunit.TraitAttribute("Category", "InsertarCliente")]
        [Xunit.TraitAttribute("Category", "DatosInvalidos")]
        public async System.Threading.Tasks.Task InsertarClienteConCorreoInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "Cliente",
                    "InsertarCliente",
                    "DatosInvalidos"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Insertar cliente con correo inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
 await testRunner.GivenAsync("el usuario navega a la página de crear cliente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table3.AddRow(new string[] {
                            "1727857870",
                            "Agustin",
                            "Nelson",
                            "01/01/1990",
                            "correo_invalido",
                            "0987654321",
                            "Quito",
                            "Activo"});
#line 23
 await testRunner.WhenAsync("completa el formulario con correo inválido", ((string)(null)), table3, "When ");
#line hidden
#line 26
 await testRunner.AndAsync("hace clic en el botón crear invalido \"Crear Cliente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.ThenAsync("debe mostrarse un mensaje de error para el campo \"Mail\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Actualizar cliente con datos válidos")]
        [Xunit.TraitAttribute("FeatureTitle", "CRUDSTestCliente")]
        [Xunit.TraitAttribute("Description", "Actualizar cliente con datos válidos")]
        [Xunit.TraitAttribute("Category", "Cliente")]
        [Xunit.TraitAttribute("Category", "ActualizarCliente")]
        [Xunit.TraitAttribute("Category", "DatosValidos")]
        public async System.Threading.Tasks.Task ActualizarClienteConDatosValidos()
        {
            string[] tagsOfScenario = new string[] {
                    "Cliente",
                    "ActualizarCliente",
                    "DatosValidos"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Actualizar cliente con datos válidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.GivenAsync("existe un cliente con código \"12\" en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.AndAsync("el usuario navega a la página de editar cliente \"12\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table4.AddRow(new string[] {
                            "1727857870",
                            "Salazar Ruiz",
                            "Juan Carlos",
                            "05/10/1992",
                            "juanc@mail.com",
                            "0998765432",
                            "Quito Centro",
                            "Activo"});
#line 35
 await testRunner.WhenAsync("actualiza los datos del formulario", ((string)(null)), table4, "When ");
#line hidden
#line 38
 await testRunner.AndAsync("hace clic en el botón guardar actualizado \"Guardar\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
 await testRunner.ThenAsync("debe redirigirse a la página de listado de clientes", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Codigo",
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table5.AddRow(new string[] {
                            "12",
                            "2468101213",
                            "Agustin",
                            "Nelson",
                            "juanc@mail.com",
                            "0998765432",
                            "Quito Centro",
                            "Activo"});
#line 40
 await testRunner.AndAsync("el cliente debe aparecer actualizado en la lista", ((string)(null)), table5, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Actualizar cliente con correo inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "CRUDSTestCliente")]
        [Xunit.TraitAttribute("Description", "Actualizar cliente con correo inválido")]
        [Xunit.TraitAttribute("Category", "Cliente")]
        [Xunit.TraitAttribute("Category", "ActualizarCliente")]
        [Xunit.TraitAttribute("Category", "DatosInvalidos")]
        public async System.Threading.Tasks.Task ActualizarClienteConCorreoInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "Cliente",
                    "ActualizarCliente",
                    "DatosInvalidos"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Actualizar cliente con correo inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
 await testRunner.GivenAsync("existe un cliente con código \"12\" en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.AndAsync("el usuario navega a la página de editar cliente \"12\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.WhenAsync("actualiza el correo con un valor inválido \"correo_invalido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.AndAsync("hace clic en el botón guardar invalido \"Guardar\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
 await testRunner.ThenAsync("debe mostrarse un mensaje de error para el campo \"Mail\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CRUDSTestClienteFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CRUDSTestClienteFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
